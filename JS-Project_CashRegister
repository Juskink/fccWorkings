function checkCashRegister(price, cash, cid) {

  var changeDue = cash - price;
  console.log(changeDue, "change due");
  var availableChange = [];
  var totalCash = sumNestedArray(cid);
  var valuesArr = [];
  var changeArr = [];
  var remainingChange = changeDue;
  var changeGiven = 0;
  var money = [
    ["PENNY",0.01],
    ["NICKEL",0.05],
    ["DIME",0.1],
    ["QUARTER",0.25],
    ["ONE",1],
    ["FIVE",5],
    ["TEN",10],
    ["TWENTY",20],
    ["ONE HUNDRED",100],
  ]
  
  
  
  

  // this is the function that will be used to sum the second value of the various nested arrays.
  function sumNestedArray (arr){
    return arr.reduce((accum,current)=>{
      return accum+current[1];
    },0).toFixed(2);
  }
  
  
   // this is an array of the amount of change in the drawer from which change can be made. it takes out all the values which are greater than the change to be given
  availableChange = cid.filter((value) => {
    return value[1]<changeDue && value[1] > 0;
  });
  let totalAvailableChange = sumNestedArray(availableChange);

  cid.forEach( function (element,index) {
    var value;
    var amount;
    switch (element[0]) {
      case "PENNY":
          value = .01;
          amount = (element[1]/value).toFixed(2);
          valuesArr.push([value,amount]);
          break; 
      case "NICKEL":
          value = .05;
          amount = (element[1]/value).toFixed(2);
          valuesArr.push([value,amount]);
          break; 
      case "DIME":
          value = .10;
          amount = (element[1]/value).toFixed(2);
          valuesArr.push([value,amount]);
          break; 
      case "QUARTER":
          value = .25;
          amount = (element[1]/value).toFixed(2);
          valuesArr.push([value,amount]);
          break; 
      case "ONE":
          value = 1;
          amount = (element[1]/value).toFixed(2);
          valuesArr.push([value,amount]);
          break; 
      case "FIVE":
          value = 5;
          amount = (element[1]/value).toFixed(2);
          valuesArr.push([value,amount]);
          break; 
      case "TEN":
          value = 10;
          amount = (element[1]/value).toFixed(2);
          valuesArr.push([value,amount]);
          break; 
      case "TWENTY":
          value = 20;
          amount = (element[1]/value).toFixed(2);
          valuesArr.push([value,amount]);
          break; 
      case "HUNDRED":
          value = 100;
          amount = (element[1]/value).toFixed(2);
          valuesArr.push([value,amount]);
          break; 
    }
  });
  
  console.log(valuesArr, "values array");

  if (totalCash < changeDue){
    return {status: "INSUFFICIENT_FUNDS", change: []} ;
  }else if(totalCash == changeDue){
    return {status: "CLOSED", change: [...cid]};
  }else if (totalCash > changeDue && totalAvailableChange < changeDue){
    return {status: "INSUFFICIENT_FUNDS", change: []} ;
  }else {
    return console.log("this is the open end");
  }

 
}

// Example cash-in-drawer array:
// [["PENNY", 1.01],
// ["NICKEL", 2.05],
// ["DIME", 3.1],
// ["QUARTER", 4.25],
// ["ONE", 90],
// ["FIVE", 55],
// ["TEN", 20],
// ["TWENTY", 60],
// ["ONE HUNDRED", 100]]

checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]);
