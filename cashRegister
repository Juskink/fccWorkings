function checkCashRegister(price, cash, cid) {
  // declare the various variables required 
  var changeDue = cash - price;
  var availableChange = [];
  var totalCash = totalOfNestedArray(cid);
  var value;
 
  // this is an array of change from which change can be made.
  //THIS SHOULD REALLY BE REMOVED AND REPLACED WITH A MORE ROBUST SOLUTION
  availableChange = cid.filter((value) => {
    return value[1]<changeDue && value[1] > 0;
  });

  // this is the total amount of change available from which exact change can possibly be made.
  var totalAvailableChange = totalOfNestedArray(availableChange);
  
 // this is a function of getting the total of array of arrays
  function totalOfNestedArray (arr) {
    var total = arr.reduce((accum,nestedArr)=>{
      return accum + nestedArr[1];
    },0);
    var roundTotal = total.toFixed(2);
    return roundTotal;
  }

  function valueFromString (str){
    switch (str) {
    case "PENNY":
        value = .01;
        break; 
    case "NICKEL":
        value = .05;
        break; 
     case "DIME":
        value = .10;
        break; 
    case "QUARTER":
        value = .25;
        break; 
     case "ONE":
        value = 1;
        break; 
    case "FIVE":
        value = 5;
        break; 
     case "TEN":
        value = 10;
        break; 
    case "TWENTY":
        value = 20;
        break; 
     case "HUNDRED":
        value = 100;
        break; 
    }
    return value;
  }

  function getExactChange (chng,drawer) {
    for (let i=drawer.length-1;i>=0;i--){
      for (let j=0;j<drawer[i]<length;j++){
        
      }

    }
  }

  if (totalCash < changeDue){
    return {status: "INSUFFICIENT_FUNDS", change: []} ;
  }else if(totalCash == changeDue){
    return {status: "CLOSED", change: [...cid]}
  }else if (totalCash > changeDue && totalAvailableChange < changeDue){
    return {status: "INSUFFICIENT_FUNDS", change: []} ;
  }else if (totalCash> changeDue && totalAvailableChange > changeDue){
    return getExactChange(changeDue,cid);
  }
 
}
